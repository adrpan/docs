"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[5477],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return f}});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function c(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?c(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},c=Object.keys(e);for(a=0;a<c.length;a++)t=c[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(a=0;a<c.length;a++)t=c[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=a.createContext({}),i=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=i(e.components);return a.createElement(l.Provider,{value:n},e.children)},p="mdxType",h={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,c=e.originalType,l=e.parentName,u=r(e,["components","mdxType","originalType","parentName"]),p=i(t),d=o,f=p["".concat(l,".").concat(d)]||p[d]||h[d]||c;return t?a.createElement(f,s(s({ref:n},u),{},{components:t})):a.createElement(f,s({ref:n},u))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var c=t.length,s=new Array(c);s[0]=d;var r={};for(var l in n)hasOwnProperty.call(n,l)&&(r[l]=n[l]);r.originalType=e,r[p]="string"==typeof e?e:o,s[1]=r;for(var i=2;i<c;i++)s[i]=t[i];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},9824:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return l},default:function(){return f},frontMatter:function(){return r},metadata:function(){return i},toc:function(){return p}});var a=t(7462),o=t(3366),c=(t(7294),t(3905)),s=["components"],r={title:"CEP-18 Transfers",slug:"/resources/tokens/cep18/transfer"},l="CEP-18 Token Transfers and Allowances",i={unversionedId:"resources/tokens/cep18/transfer",id:"resources/tokens/cep18/transfer",title:"CEP-18 Transfers",description:"This document describes how to transfer CEP-18 tokens on a Casper network using the Casper client. The Exploring the CEP18 Contracts documentation contains more in depth explanations on how to find the various hashes and URefs referenced throughout this document.",source:"@site/source/docs/casper/resources/tokens/cep18/transfer.md",sourceDirName:"resources/tokens/cep18",slug:"/resources/tokens/cep18/transfer",permalink:"/resources/tokens/cep18/transfer",draft:!1,editUrl:"https://github.com/casper-network/docs/tree/dev/source/docs/casper/resources/tokens/cep18/transfer.md",tags:[],version:"current",lastUpdatedAt:1698430553,formattedLastUpdatedAt:"Oct 27, 2023",frontMatter:{title:"CEP-18 Transfers",slug:"/resources/tokens/cep18/transfer"},sidebar:"resources",previous:{title:"CEP-18 Contract Details",permalink:"/resources/tokens/cep18/query"},next:{title:"Testing Guide",permalink:"/resources/tokens/cep18/tests"}},u={},p=[{value:"Transferring CEP-18 Tokens to Another Account",id:"transferring-cep-18-tokens-to-another-account",level:2},{value:"Invoking the <code>check_balance_of</code> Entry Point",id:"invoking-the-check_balance_of-entry-point",level:3},{value:"Approving an Allowance for Another Account",id:"approving-an-allowance-for-another-account",level:2},{value:"Approving an Account to Spend Tokens on Another Account&#39;s Behalf",id:"approving-an-account-to-spend-tokens-on-another-accounts-behalf",level:3},{value:"Verifying a Previously Issued Allowance",id:"verifying-a-previously-issued-allowance",level:3},{value:"Transferring Tokens from an Allowance",id:"transferring-tokens-from-an-allowance",level:3},{value:"Next Steps",id:"next-steps",level:3}],h={toc:p},d="wrapper";function f(e){var n=e.components,t=(0,o.Z)(e,s);return(0,c.kt)(d,(0,a.Z)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,c.kt)("h1",{id:"cep-18-token-transfers-and-allowances"},"CEP-18 Token Transfers and Allowances"),(0,c.kt)("p",null,"This document describes how to transfer CEP-18 tokens on a Casper network using the Casper client. The ",(0,c.kt)("a",{parentName:"p",href:"/resources/tokens/cep18/query"},"Exploring the CEP18 Contracts")," documentation contains more in depth explanations on how to find the various hashes and URefs referenced throughout this document."),(0,c.kt)("h2",{id:"transferring-cep-18-tokens-to-another-account"},"Transferring CEP-18 Tokens to Another Account"),(0,c.kt)("p",null,"The following command will invoke the ",(0,c.kt)("inlineCode",{parentName:"p"},"transfer")," entry point on your instance of CEP-18, directing it to transfer 10 of the associated CEP-18 tokens to another account."),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-json"},'casper-client put-deploy -n http://<node IP>:<PORT> \\\n// The chain name of the Casper network on which your CEP-18 instance was installed.\n--chain-name <CHAIN NAME>\\\n// The local path to your account\'s secret key.\n--secret-key ~/casper/demo/user_a/secret_key.pem \\\n// The contract hash of your CEP-18 contract instance.\n--session-hash hash-b568f50a64acc8bbe43462ffe243849a88111060b228dacb8f08d42e26985180 \\\n// The name of the entry point you are invoking.\n--session-entry-point "transfer" \\\n// The account hash of the account that you are sending CEP-18 tokens to.\n--session-arg "recipient:key=\'account-hash-9f81014b9c7406c531ebf0477132283f4eb59143d7903a2fae54358b26cea44b" \\\n// The amount of CEP-18 tokens you are sending to the receiving account.\n--session-arg "amount:u256=\'10\'" \\\n// The gas payment you are allotting, in motes.\n--payment-amount "10000000000"\n')),(0,c.kt)("details",null,(0,c.kt)("summary",null,(0,c.kt)("b",null,"Casper client command without comments")),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-bash"},'casper-client put-deploy -n http://<node IP>:<PORT> \\\n--chain-name <CHAIN NAME>\\\n--secret-key ~/casper/demo/user_a/secret_key.pem \\\n--session-hash hash-b568f50a64acc8bbe43462ffe243849a88111060b228dacb8f08d42e26985180 \\\n--session-entry-point "transfer" \\\n--session-arg "recipient:key=\'account-hash-9f81014b9c7406c531ebf0477132283f4eb59143d7903a2fae54358b26cea44b" \\\n--session-arg "amount:u256=\'50\'" \\\n--payment-amount "10000000000"\n'))),(0,c.kt)("p",null,"This command will return a deploy hash that you can query using ",(0,c.kt)("inlineCode",{parentName:"p"},"casper-client get-deploy"),". Querying the Deploy allows you to verify execution success, but you will need to use the ",(0,c.kt)("inlineCode",{parentName:"p"},"check_balance_of")," entry point on the utility contract to verify the account's balance."),(0,c.kt)("h3",{id:"invoking-the-check_balance_of-entry-point"},"Invoking the ",(0,c.kt)("inlineCode",{parentName:"h3"},"check_balance_of")," Entry Point"),(0,c.kt)("p",null,"The following Casper client command invokes the ",(0,c.kt)("inlineCode",{parentName:"p"},"check_balance_of")," entry point on the ",(0,c.kt)("inlineCode",{parentName:"p"},"cep18_test_contract"),"."),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-json"},'casper-client put-deploy -n http://<node IP>:<PORT>\\\n--secret-key ~/casper/demo/user_a/secret_key.pem \\\n--session-package-name "cep18_test_contract" \\\n--session-entry-point "check_balance_of" \\\n// This is the contract hash of your CEP-18 contract instance, passed in as an `account-hash-`.\n--session-arg "token_contract:account_hash=\'account-hash-b568f50a64acc8bbe43462ffe243849a88111060b228dacb8f08d42e26985180\'" \\\n// This is the account hash of the account you are checking the balance of.\n--session-arg "address:key=\'account-hash-303c0f8208220fe9a4de40e1ada1d35fdd6c678877908f01fddb2a56502d67fd\'" \\\n--chain-name <CHAIN NAME> \\\n--payment-amount 1000000000\n')),(0,c.kt)("details",null,(0,c.kt)("summary",null,(0,c.kt)("b",null,"Casper client command without comments")),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-bash"},'casper-client put-deploy -n http://<node IP>:<PORT>\\\n--secret-key ~/casper/demo/user_a/secret_key.pem \\\n--session-package-name "cep18_test_contract" \\\n--session-entry-point "check_balance_of" \\\n--session-arg "token_contract:account_hash=\'account-hash-b568f50a64acc8bbe43462ffe243849a88111060b228dacb8f08d42e26985180\'" \\\n--session-arg "address:key=\'account-hash-303c0f8208220fe9a4de40e1ada1d35fdd6c678877908f01fddb2a56502d67fd\'" \\\n--chain-name <CHAIN NAME> \\\n--payment-amount 1000000000\n'))),(0,c.kt)("p",null,"After sending this command, you will need to query the ",(0,c.kt)("inlineCode",{parentName:"p"},"results")," URef within the ",(0,c.kt)("inlineCode",{parentName:"p"},"NamedKeys")," of your ",(0,c.kt)("inlineCode",{parentName:"p"},"cep18_test_contract")," utility contract instance. More information on finding this URef can be found in the ",(0,c.kt)("a",{parentName:"p",href:"/resources/tokens/cep18/query#querying-the-utility-contract"},"Exploring the CEP18 Contracts")," document."),(0,c.kt)("p",null,"You can use the following command to query global state for the ",(0,c.kt)("inlineCode",{parentName:"p"},"results")," URef."),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-json"},"casper-client query-global-state -n http://<NODE IP>:<PORT> \\\n// This is the `results` URef location from your `cep18_test_contract` `NamedKeys`\n--key uref-a46ad389b53715d9991a513c8ca48e1502facc4c563c0700a31e830c4cb8a7d4-007 \\\n--state-root-hash 3aecd0e4b6ec29ee7c1eed701132eabfe6e66a1e0f1595c9c65bfed447e474f7\n")),(0,c.kt)("details",null,(0,c.kt)("summary",null,(0,c.kt)("b",null,"Casper client command without comments")),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-bash"},"casper-client query-global-state -n http://<NODE IP>:<PORT> \\\n--key uref-a46ad389b53715d9991a513c8ca48e1502facc4c563c0700a31e830c4cb8a7d4-007 \\\n--state-root-hash 3aecd0e4b6ec29ee7c1eed701132eabfe6e66a1e0f1595c9c65bfed447e474f7\n"))),(0,c.kt)("p",null,"This command should show something similar to the following in response, with ",(0,c.kt)("inlineCode",{parentName:"p"},"parsed")," being the amount of CEP-18 tokens that the account holds."),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-bash"},'{\n  "id": -8841145064950441692,\n  "jsonrpc": "2.0",\n  "result": {\n    "api_version": "1.0.0",\n    "block_header": null,\n    "merkle_proof": "[3796 hex chars]",\n    "stored_value": {\n      "CLValue": {\n        "bytes": "010a",\n        "cl_type": "U256",\n        "parsed": "10"\n      }\n    }\n  }\n}\n')),(0,c.kt)("h2",{id:"approving-an-allowance-for-another-account"},"Approving an Allowance for Another Account"),(0,c.kt)("p",null,"The Casper fungible token contract features an ",(0,c.kt)("inlineCode",{parentName:"p"},"allowance")," entry point that allows an account to delegate another account to spend a preset number of CEP-18 tokens from their balance."),(0,c.kt)("h3",{id:"approving-an-account-to-spend-tokens-on-another-accounts-behalf"},"Approving an Account to Spend Tokens on Another Account's Behalf"),(0,c.kt)("p",null,"The following command approves a third-party account to spend an ",(0,c.kt)("inlineCode",{parentName:"p"},"allowance")," of 15 CEP-18 tokens from the balance of the account that sent the CEP-18 instance."),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-json"},'casper-client put-deploy -n http://<node IP>:<PORT>\\\n--chain-name <CHAIN NAME> \\\n--secret-key ~/casper/demo/user_a/secret_key.pem \\\n// This is the contract hash of the CEP-18 token contract.\n--session-hash hash-05d893e76c731729fc26339e5a970bd79fbf4a6adf743c8385431fb494bff45e \\\n--session-entry-point "approve" \\\n// This is the account hash of the account that will receive an allowance from the balance of the account that sent the Deploy.\n--session-arg "spender:key=\'account-hash-17192017d32db5dc9f598bf8ac6ac35ee4b64748669b00572d88335941479513\'" \\\n// This is the number of CEP-18 tokens included in the allowance.\n--session-arg "amount:u256=\'15\'" \\\n--payment-amount "10000000000"\n')),(0,c.kt)("details",null,(0,c.kt)("summary",null,(0,c.kt)("b",null,"Casper client command without comments")),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-bash"},'casper-client put-deploy -n http://<node IP>:<PORT>\\\n--chain-name <CHAIN NAME> \\\n--secret-key ~/casper/demo/user_a/secret_key.pem \\\n--session-hash hash-05d893e76c731729fc26339e5a970bd79fbf4a6adf743c8385431fb494bff45e \\\n--session-entry-point "approve" \\\n--session-arg "spender:key=\'account-hash-17192017d32db5dc9f598bf8ac6ac35ee4b64748669b00572d88335941479513\'" \\\n--session-arg "amount:u256=\'15\'" \\\n--payment-amount "10000000000"\n'))),(0,c.kt)("h3",{id:"verifying-a-previously-issued-allowance"},"Verifying a Previously Issued Allowance"),(0,c.kt)("p",null,"After approving an account to spend an ",(0,c.kt)("inlineCode",{parentName:"p"},"allowance")," of tokens, we can verify the allotted allowance by using the utility contract. The following command will write the ",(0,c.kt)("inlineCode",{parentName:"p"},"allowance")," of the spender's account to the ",(0,c.kt)("inlineCode",{parentName:"p"},"result")," URef of in the utility contract's ",(0,c.kt)("inlineCode",{parentName:"p"},"NamedKeys"),":"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-json"},'casper-client put-deploy -n http://<node IP>:<PORT>\\\n--secret-key ~/casper/demo/user_a/secret_key.pem \\\n--session-package-name "cep18_test_contract" \\\n--session-entry-point "check_allowance_of" \\\n// This is the contract hash for the CEP-18 token.\n--session-arg "token_contract:account_hash=\'account-hash-05d893e76c731729fc26339e5a970bd79fbf4a6adf743c8385431fb494bff45e\'" \\\n// This is the account hash for the account that owns the CEP-18 tokens.\n--session-arg "owner:key=\'account-hash-39f15c23df9be1244572bb499fac62cbcad3cab2dc1438609842f602f943d7d2\'" \\\n// This is the account hash for the account previously authorized to spend an allowance of the owning account\'s CEP-18 tokens.\n--session-arg "spender:key=\'account-hash-17192017d32db5dc9f598bf8ac6ac35ee4b64748669b00572d88335941479513\'" \\\n--chain-name <CHAIN NAME> \\\n--payment-amount 10000000000\n')),(0,c.kt)("details",null,(0,c.kt)("summary",null,(0,c.kt)("b",null,"Casper client command without comments")),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-bash"},'casper-client put-deploy -n http://<node IP>:<PORT>\\\n--secret-key ~/casper/demo/user_a/secret_key.pem \\\n--session-package-name "cep18_test_contract" \\\n--session-entry-point "check_allowance_of" \\\n--session-arg "token_contract:account_hash=\'account-hash-05d893e76c731729fc26339e5a970bd79fbf4a6adf743c8385431fb494bff45e\'" \\\n--session-arg "owner:key=\'account-hash-39f15c23df9be1244572bb499fac62cbcad3cab2dc1438609842f602f943d7d2\'" \\\n--session-arg "spender:key=\'account-hash-17192017d32db5dc9f598bf8ac6ac35ee4b64748669b00572d88335941479513\'" \\\n--chain-name <CHAIN NAME> \\\n--payment-amount 10000000000\n'))),(0,c.kt)("p",null,"The following command queries global state to return the value stored under the ",(0,c.kt)("inlineCode",{parentName:"p"},"result")," URef:"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-json"},"casper-client query-global-state -n http://<node IP>:<PORT> \\\n// This is the previously identified `result` URef from the utility contract's `NamedKeys`\n--key uref-a46ad389b53715d9991a513c8ca48e1502facc4c563c0700a31e830c4cb8a7d4-007 \\\n--state-root-hash e64f877f65df26db74300bb175c244d589bd88a23b91abf9ceb73ac5e65e90f1\n")),(0,c.kt)("details",null,(0,c.kt)("summary",null,(0,c.kt)("b",null,"Casper client command without comments")),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-bash"},"casper-client query-global-state -n http://<node IP>:<PORT> \\\n--key uref-a46ad389b53715d9991a513c8ca48e1502facc4c563c0700a31e830c4cb8a7d4-007 \\\n--state-root-hash e64f877f65df26db74300bb175c244d589bd88a23b91abf9ceb73ac5e65e90f1\n"))),(0,c.kt)("p",null,"You should get a response similar to the following:"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-bash"},'{\n  "id": -9142472925449984061,\n  "jsonrpc": "2.0",\n  "result": {\n    "api_version": "1.0.0",\n    "block_header": null,\n    "merkle_proof": "[3796 hex chars]",\n    "stored_value": {\n      "CLValue": {\n        "bytes": "010f",\n        "cl_type": "U256",\n        "parsed": "15"\n      }\n    }\n  }\n}\n')),(0,c.kt)("h3",{id:"transferring-tokens-from-an-allowance"},"Transferring Tokens from an Allowance"),(0,c.kt)("p",null,"The following command allows an account to transfer CEP-18 tokens held by another account up to their approved ",(0,c.kt)("inlineCode",{parentName:"p"},"allowance"),"."),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-json"},'casper-client put-deploy -n http://<NODE IP>:<PORT> \\\n--chain-name <CHAIN NAME> \\\n// This is the secret key for the account that is spending their `allowance` from another account\'s balance.\n--secret-key ~/casper/demo/user_a/secret_key.pem \\\n// This is the CEP-18 token contract.\n--session-hash hash-05d893e76c731729fc26339e5a970bd79fbf4a6adf743c8385431fb494bff45e \\\n--session-entry-point "transfer_from" \\\n// This is the account hash of the account that holds the CEP-18 in their balance.\n--session-arg "owner:key=\'account-hash-39f15c23df9be1244572bb499fac62cbcad3cab2dc1438609842f602f943d7d2\'" \\\n// This is the account hash of the account that will receive the transferred CEP-18 tokens.\n--session-arg "recipient:key=\'account-hash-17192017d32db5dc9f598bf8ac6ac35ee4b64748669b00572d88335941479513\'" \\\n// This is the amount of tokens to be transferred. If this amount exceeds the `allowance` of the account sending the Deploy, it will fail.\n--session-arg "amount:u256=\'10\'" \\\n--payment-amount "10000000000"\n')),(0,c.kt)("details",null,(0,c.kt)("summary",null,(0,c.kt)("b",null,"Casper client command without comments")),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-bash"},'casper-client put-deploy -n http://<NODE IP>:<PORT> \\\n--chain-name <CHAIN NAME> \\\n--secret-key ~/casper/demo/user_a/secret_key.pem \\\n--session-hash hash-05d893e76c731729fc26339e5a970bd79fbf4a6adf743c8385431fb494bff45e \\\n--session-entry-point "transfer_from" \\\n--session-arg "owner:key=\'account-hash-39f15c23df9be1244572bb499fac62cbcad3cab2dc1438609842f602f943d7d2\'" \\\n--session-arg "recipient:key=\'account-hash-17192017d32db5dc9f598bf8ac6ac35ee4b64748669b00572d88335941479513\'" \\\n--session-arg "amount:u256=\'10\'" \\\n--payment-amount "10000000000"\n'))),(0,c.kt)("h3",{id:"next-steps"},"Next Steps"),(0,c.kt)("ul",null,(0,c.kt)("li",{parentName:"ul"},(0,c.kt)("a",{parentName:"li",href:"/resources/tokens/cep18/tests"},"Testing Framework for CEP-18"))))}f.isMDXComponent=!0}}]);